@online{cuda:programming, 
     title        = {CUDA C Programming Guide}, 
     year         = {2015},
	 month        = {9},
     url          = {https://docs.nvidia.com/cuda/pdf/CUDA_C_Programming_Guide.pdf}, 
}  
%     sortkey      = {wiki},
%     label        = {wiki},

@article{1742-6596-513-5-052010,
  author={Funke, D. and Hauth, T. and Innocente, V. and Quast, G. and Sanders, P. and Schieferdecker, D.},
  title={Parallel track reconstruction in CMS using the cellular automaton approach},
  journal={Journal of Physics: Conference Series},
  volume={513},
  number={5},
  pages={052010},
  url={http://stacks.iop.org/1742-6596/513/i=5/a=052010},
  year={2014},
  doi={10.1088/1742-6596/513/5/052010},
  abstract={The Compact Muon Solenoid (CMS) experiment at the Large Hadron Collider (LHC) is a general-purpose particle detector and comprises the largest silicon-based tracking system built to date with 75 million individual readout channels. The precise reconstruction of particle tracks from this tremendous amount of input channels is a compute-intensive task. The foreseen LHC beam parameters for the next data taking period, starting in 2015, will result in an increase in the number of simultaneous proton-proton interactions and hence the number of particle tracks per event. Due to the stagnating clock frequencies of individual CPU cores, new approaches to particle track reconstruction need to be evaluated in order to cope with this computational challenge. Track finding methods that are based on cellular automata (CA) offer a fast and parallelizable alternative to the well-established Kalman filter-based algorithms. We present a new cellular automaton based track reconstruction, which copes with the complex detector geometry of CMS. We detail the specific design choices made to allow for a high-performance computation on GPU and CPU devices using the OpenCL framework. We conclude by evaluating the physics performance, as well as the computational properties of our implementation on various hardware platforms and show that a significant speedup can be attained by using GPU architectures while achieving a reasonable physics performance at the same time.}
}
